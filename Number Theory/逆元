之前的快速幂中解决的是(a^b)%mod的形式，最为简单的加减法(a+b)%mod=a%mod+b%mod,(a-b)%mod=a%mod-b%mod,乘法也可以通过公式
(a*b)%mod=(a%mod)*(b%mod)%mod解决，但是(a/b)%mod的并不能向上面这几种形式解决，为此引入了逆元的概念。
逆元根据博客上的资料就类似于相反数的概念，或者可以说线性代数中的伪逆更为类似，可以如下定义
设c是b的逆元，则有b*c≡1(mod m)；
(a/b)%m = (a/b)*1%m = (a/b)*b*c%m = a*c(mod m);
即a/b的模等于a*(b的逆元)的模；

求解逆元的方法网上也有很多，主要贴个版子
1.费马小定理
费马小定理为a^(p-1)≡1(%p),(a,p)=1;
费马小定理需要mod为质数，其逆元为a^(p-2)，证明过程。。。

long long inv(long long a,long long  mod)
{
	return quickpow(a,mod-2,mod);
}

2.扩展欧几里得
扩展欧几里得需要a和mod之间互质，原因是a*x≡1(mod m)等价于a*x+m*y≡1，而a*x + b*y = c 有解的充要条件： c % gcd(a , b) == 0，
所以a和mod之间必须互质。

贴个版
long long inv(long long a,long long b,long long mod)
{
    int x,y;
    exgcd(a,b,x,y);
    return (x%mod+mod)%mod;
}

3.递归算法
证明：


贴个版

递归
long long inv(long long a,long long p) //注意a要小于p，先把a%p一下 
{
    return a==1?1:(p-p/a)*inv(p%a,p)%p;
}

O(n)处理1到n的逆元
void init()
{
    inv[1]=1;
    for(int i=2;i<=n;i++)
    {
        inv[i]=(p-p/i)*1ll*inv[p%i]%p;
    }
}





















